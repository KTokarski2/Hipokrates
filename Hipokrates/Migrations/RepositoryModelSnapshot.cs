// <auto-generated />
using System;
using Hipokrates.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hipokrates.Migrations
{
    [DbContext(typeof(Repository))]
    partial class RepositoryModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Hipokrates.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Address_pk");

                    b.HasIndex("IdPatient");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Consultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<int>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("Id")
                        .HasName("Consultation_pk");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdRoom");

                    b.HasIndex("IdService");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("Hipokrates.Models.MedicalExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("MedicalExam_pk");

                    b.ToTable("MedicalExam", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.MedicalReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicalExam")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("MedicalReferral_pk");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdMedicalExam");

                    b.HasIndex("IdPatient");

                    b.ToTable("MedicalReferral", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Medicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Medicament_pk");

                    b.ToTable("Medicament", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Prescription_pk");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Prescription", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.PrescriptionMedicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.HasKey("IdMedicament", "IdPrescription")
                        .HasName("PrescirptionMedicament_pk");

                    b.HasIndex("IdPrescription");

                    b.ToTable("PrescriptionMedicament", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdRecommendations")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Recommendation_pk");

                    b.HasIndex("IdRecommendations");

                    b.ToTable("Recommendation", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Recommendations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DrugDosage")
                        .HasColumnType("longtext");

                    b.Property<int>("IdConsultation")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Recommendations_pk");

                    b.HasIndex("IdConsultation");

                    b.HasIndex("IdPatient");

                    b.ToTable("Recommendations", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Room_pk");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Service_pk");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Specialization_pk");

                    b.HasIndex("IdDoctor");

                    b.ToTable("Specialization", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.Substance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("Substance_pk");

                    b.ToTable("Substance", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.SubstanceMedicament", b =>
                {
                    b.Property<int>("IdSubstance")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.HasKey("IdSubstance", "IdMedicament")
                        .HasName("Substance_Medicament_pk");

                    b.HasIndex("IdMedicament");

                    b.ToTable("Substance_Medicament", (string)null);
                });

            modelBuilder.Entity("Hipokrates.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("User_pk");

                    b.ToTable("User", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hipokrates.Models.Doctor", b =>
                {
                    b.HasBaseType("Hipokrates.Models.User");

                    b.Property<decimal>("BaseSalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(8000m);

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("int");

                    b.ToTable("Doctor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Email = "kamil@example.com",
                            FirstName = "Kamil",
                            LastName = "Lekarz",
                            Password = "password",
                            BaseSalary = 10000m,
                            LicenseNumber = 54546565
                        },
                        new
                        {
                            Id = 12,
                            Email = "lena@example.com",
                            FirstName = "Lena",
                            LastName = "Medycyna",
                            Password = "password",
                            BaseSalary = 12000m,
                            LicenseNumber = 43554545
                        },
                        new
                        {
                            Id = 13,
                            Email = "marek@example.com",
                            FirstName = "Marek",
                            LastName = "Chirurg",
                            Password = "password",
                            BaseSalary = 15000m,
                            LicenseNumber = 43545456
                        },
                        new
                        {
                            Id = 14,
                            Email = "natalia@example.com",
                            FirstName = "Natalia",
                            LastName = "Specjalista",
                            Password = "password",
                            BaseSalary = 13000m,
                            LicenseNumber = 4546466
                        },
                        new
                        {
                            Id = 15,
                            Email = "oskar@example.com",
                            FirstName = "Oskar",
                            LastName = "Ortopeda",
                            Password = "password",
                            BaseSalary = 14000m,
                            LicenseNumber = 45464664
                        });
                });

            modelBuilder.Entity("Hipokrates.Models.Nurse", b =>
                {
                    b.HasBaseType("Hipokrates.Models.User");

                    b.Property<decimal>("BaseSalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(5000m);

                    b.ToTable("Nurse", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alicja@example.com",
                            FirstName = "Alicja",
                            LastName = "Pielęgniarka",
                            Password = "password",
                            BaseSalary = 5000m
                        },
                        new
                        {
                            Id = 2,
                            Email = "bartosz@example.com",
                            FirstName = "Bartosz",
                            LastName = "Opiekun",
                            Password = "password",
                            BaseSalary = 5000m
                        },
                        new
                        {
                            Id = 3,
                            Email = "celina@example.com",
                            FirstName = "Celina",
                            LastName = "Higienistka",
                            Password = "password",
                            BaseSalary = 5000m
                        },
                        new
                        {
                            Id = 4,
                            Email = "damian@example.com",
                            FirstName = "Damian",
                            LastName = "Ratowniczy",
                            Password = "password",
                            BaseSalary = 5000m
                        },
                        new
                        {
                            Id = 5,
                            Email = "eliza@example.com",
                            FirstName = "Eliza",
                            LastName = "Zdrowotna",
                            Password = "password",
                            BaseSalary = 5000m
                        });
                });

            modelBuilder.Entity("Hipokrates.Models.Patient", b =>
                {
                    b.HasBaseType("Hipokrates.Models.User");

                    b.Property<int>("InsuranceNumber")
                        .HasColumnType("int");

                    b.Property<int>("Pesel")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Patient", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Email = "filip@example.com",
                            FirstName = "Filip",
                            LastName = "Pacjent",
                            Password = "password",
                            InsuranceNumber = 546646,
                            Pesel = 1234567890,
                            PhoneNumber = 123456789,
                            Plan = "Standard"
                        },
                        new
                        {
                            Id = 7,
                            Email = "gabriela@example.com",
                            FirstName = "Gabriela",
                            LastName = "Chory",
                            Password = "password",
                            InsuranceNumber = 4564646,
                            Pesel = 987654321,
                            PhoneNumber = 987654321,
                            Plan = "Standard"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hanna@example.com",
                            FirstName = "Hanna",
                            LastName = "Leczenie",
                            Password = "password",
                            InsuranceNumber = 453466,
                            Pesel = 54321678,
                            PhoneNumber = 543216789,
                            Plan = "Premium"
                        },
                        new
                        {
                            Id = 9,
                            Email = "igor@example.com",
                            FirstName = "Igor",
                            LastName = "Wyleczony",
                            Password = "password",
                            InsuranceNumber = 5436446,
                            Pesel = 6789012,
                            PhoneNumber = 678901234,
                            Plan = "Standard"
                        },
                        new
                        {
                            Id = 10,
                            Email = "janina@example.com",
                            FirstName = "Janina",
                            LastName = "Badanie",
                            Password = "password",
                            InsuranceNumber = 45435456,
                            Pesel = 23456789,
                            PhoneNumber = 234567890,
                            Plan = "Standard"
                        });
                });

            modelBuilder.Entity("Hipokrates.Models.Address", b =>
                {
                    b.HasOne("Hipokrates.Models.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Patient_Address");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hipokrates.Models.Consultation", b =>
                {
                    b.HasOne("Hipokrates.Models.Doctor", "Doctor")
                        .WithMany("Consultations")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Doctor_Consultation");

                    b.HasOne("Hipokrates.Models.Room", "Room")
                        .WithMany("Consultations")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Room_Consultation");

                    b.HasOne("Hipokrates.Models.Service", "Service")
                        .WithMany("Consultations")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Service_Consultation");

                    b.Navigation("Doctor");

                    b.Navigation("Room");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Hipokrates.Models.MedicalReferral", b =>
                {
                    b.HasOne("Hipokrates.Models.Doctor", "Doctor")
                        .WithMany("Referrals")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Doctor_Referral");

                    b.HasOne("Hipokrates.Models.MedicalExam", "MedicalExam")
                        .WithMany("Referrals")
                        .HasForeignKey("IdMedicalExam")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("MedicalExam_Referral");

                    b.HasOne("Hipokrates.Models.Patient", "Patient")
                        .WithMany("Referrals")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Patient_Referral");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalExam");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hipokrates.Models.Prescription", b =>
                {
                    b.HasOne("Hipokrates.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Doctor_Prescription");

                    b.HasOne("Hipokrates.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Patient_Prescription");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hipokrates.Models.PrescriptionMedicament", b =>
                {
                    b.HasOne("Hipokrates.Models.Medicament", "Medicament")
                        .WithMany("PrescriptionMedicaments")
                        .HasForeignKey("IdMedicament")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Medicament_PrescriptionMedicament");

                    b.HasOne("Hipokrates.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicaments")
                        .HasForeignKey("IdPrescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Prescription_PrescriptionMedicament");

                    b.Navigation("Medicament");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Hipokrates.Models.Recommendation", b =>
                {
                    b.HasOne("Hipokrates.Models.Recommendations", "Recommendations")
                        .WithMany("Guidelines")
                        .HasForeignKey("IdRecommendations")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Recommendations_Recommendation");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("Hipokrates.Models.Recommendations", b =>
                {
                    b.HasOne("Hipokrates.Models.Consultation", "Consultation")
                        .WithMany("Recommendations")
                        .HasForeignKey("IdConsultation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Consultation_Recommendations");

                    b.HasOne("Hipokrates.Models.Patient", "Patient")
                        .WithMany("Recommendations")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Patient_Recommendations");

                    b.Navigation("Consultation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hipokrates.Models.Specialization", b =>
                {
                    b.HasOne("Hipokrates.Models.Doctor", "Doctor")
                        .WithMany("Specializations")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Doctor_Specializaton");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hipokrates.Models.SubstanceMedicament", b =>
                {
                    b.HasOne("Hipokrates.Models.Medicament", "Medicament")
                        .WithMany("SubstancesMedicaments")
                        .HasForeignKey("IdMedicament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Medicament_SubstanceMedicament");

                    b.HasOne("Hipokrates.Models.Substance", "Substance")
                        .WithMany("SubstanceMedicaments")
                        .HasForeignKey("IdSubstance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Substance_SubstanceMedicament");

                    b.Navigation("Medicament");

                    b.Navigation("Substance");
                });

            modelBuilder.Entity("Hipokrates.Models.Doctor", b =>
                {
                    b.HasOne("Hipokrates.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Hipokrates.Models.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hipokrates.Models.Nurse", b =>
                {
                    b.HasOne("Hipokrates.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Hipokrates.Models.Nurse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hipokrates.Models.Patient", b =>
                {
                    b.HasOne("Hipokrates.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Hipokrates.Models.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hipokrates.Models.Consultation", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("Hipokrates.Models.MedicalExam", b =>
                {
                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("Hipokrates.Models.Medicament", b =>
                {
                    b.Navigation("PrescriptionMedicaments");

                    b.Navigation("SubstancesMedicaments");
                });

            modelBuilder.Entity("Hipokrates.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionMedicaments");
                });

            modelBuilder.Entity("Hipokrates.Models.Recommendations", b =>
                {
                    b.Navigation("Guidelines");
                });

            modelBuilder.Entity("Hipokrates.Models.Room", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("Hipokrates.Models.Service", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("Hipokrates.Models.Substance", b =>
                {
                    b.Navigation("SubstanceMedicaments");
                });

            modelBuilder.Entity("Hipokrates.Models.Doctor", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Prescriptions");

                    b.Navigation("Referrals");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("Hipokrates.Models.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Prescriptions");

                    b.Navigation("Recommendations");

                    b.Navigation("Referrals");
                });
#pragma warning restore 612, 618
        }
    }
}
